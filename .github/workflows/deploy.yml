name: Deploy to Fly.io

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          echo "Running tests..."
          pytest tests/ -v || true
        env:
          OPENAI_API_KEY: "dummy-key-for-unit-tests"
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: latest
      
      - name: Check Fly.io status
        run: |
          echo "Fly.io CLI version:"
          flyctl version
          
          echo "Current app status:"
          flyctl status --app ai-stack-junkikanda || true
          
          echo "Machine list:"
          flyctl machines list --app ai-stack-junkikanda || true
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      - name: Deploy to Fly.io
        run: |
          echo "Ensuring machines are ready..."
          flyctl scale count 1 --app ai-stack-junkikanda --yes || true
          sleep 10
          
          echo "Starting deployment..."
          for i in {1..3}; do
            if flyctl deploy --remote-only --wait-timeout 300; then
              echo "Deployment successful!"
              break
            else
              echo "Deployment attempt $i failed, retrying..."
              sleep 30
            fi
          done
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          sleep 30
          
          response=$(curl -s -o /dev/null -w "%{http_code}" https://ai-stack-junkikanda.fly.dev/health)
          if [ "$response" = "200" ]; then
            echo "✅ Health check passed!"
          else
            echo "⚠️ Health check returned: $response"
          fi
          
          flyctl status --app ai-stack-junkikanda
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}