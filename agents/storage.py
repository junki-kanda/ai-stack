# agents/storage.py
import os
import json
from datetime import datetime
from typing import Dict, Any

class CodeStorage:
    """生成されたコードをファイルに保存"""
    
    def __init__(self, storage_path: str = "/app/data/generated_code"):
        self.storage_path = storage_path
        os.makedirs(storage_path, exist_ok=True)
    
    def save_code(self, job_id: str, code: str, metadata: Dict[str, Any]) -> str:
        """
        生成されたコードをファイルに保存
        
        Returns:
            保存したファイルのパス
        """
        # ファイル名を生成
        timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        filename = f"{job_id}_{timestamp}.py"
        filepath = os.path.join(self.storage_path, filename)
        
        # メタデータ付きでコードを保存
        content = f'''"""
Generated by AI-Stack
Job ID: {job_id}
Task: {metadata.get('task', 'Unknown')}
Generated at: {timestamp}
Test Passed: {metadata.get('test_passed', False)}
"""

{code}
'''
        
        # ファイルに書き込み
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # メタデータもJSONで保存
        meta_filepath = filepath.replace('.py', '_metadata.json')
        with open(meta_filepath, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        return filepath
    
    def list_generated_codes(self) -> list:
        """保存されたコードファイルのリストを取得"""
        files = []
        if os.path.exists(self.storage_path):
            for filename in os.listdir(self.storage_path):
                if filename.endswith('.py'):
                    filepath = os.path.join(self.storage_path, filename)
                    meta_filepath = filepath.replace('.py', '_metadata.json')
                    
                    metadata = {}
                    if os.path.exists(meta_filepath):
                        with open(meta_filepath, 'r', encoding='utf-8') as f:
                            metadata = json.load(f)
                    
                    files.append({
                        "filename": filename,
                        "filepath": filepath,
                        "metadata": metadata,
                        "created_at": os.path.getctime(filepath)
                    })
        
        return sorted(files, key=lambda x: x['created_at'], reverse=True)